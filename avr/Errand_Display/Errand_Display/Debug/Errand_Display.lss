
Errand_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023e  00800100  0000079e  00000812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000079e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a80  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013de  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ba8  00000000  00000000  0000200e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a2d  00000000  00000000  00002bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  000035e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dd  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c6  00000000  00000000  00003e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00004627  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
   4:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
   8:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
   c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  10:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  14:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  18:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  1c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  20:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  24:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  28:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  2c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  30:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  34:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  38:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  3c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  40:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  44:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  48:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  4c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  50:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  54:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  58:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  5c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  60:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
  64:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 5f       	subi	r16, 0xF0	; 240
  70:	00 00       	nop
  72:	00 07       	cpc	r16, r16
  74:	00 07       	cpc	r16, r16
  76:	00 14       	cp	r0, r0
  78:	7f 14       	cp	r7, r15
  7a:	7f 14       	cp	r7, r15
  7c:	24 2a       	or	r2, r20
  7e:	7f 2a       	or	r7, r31
  80:	12 23       	and	r17, r18
  82:	13 08       	sbc	r1, r3
  84:	64 62       	ori	r22, 0x24	; 36
  86:	36 49       	sbci	r19, 0x96	; 150
  88:	55 22       	and	r5, r21
  8a:	50 00       	.word	0x0050	; ????
  8c:	05 03       	mulsu	r16, r21
  8e:	00 00       	nop
  90:	00 1c       	adc	r0, r0
  92:	22 41       	sbci	r18, 0x12	; 18
  94:	00 00       	nop
  96:	41 22       	and	r4, r17
  98:	1c 00       	.word	0x001c	; ????
  9a:	14 08       	sbc	r1, r4
  9c:	3e 08       	sbc	r3, r14
  9e:	14 08       	sbc	r1, r4
  a0:	08 3e       	cpi	r16, 0xE8	; 232
  a2:	08 08       	sbc	r0, r8
  a4:	00 50       	subi	r16, 0x00	; 0
  a6:	30 00       	.word	0x0030	; ????
  a8:	00 08       	sbc	r0, r0
  aa:	08 08       	sbc	r0, r8
  ac:	08 08       	sbc	r0, r8
  ae:	00 60       	ori	r16, 0x00	; 0
  b0:	60 00       	.word	0x0060	; ????
  b2:	00 20       	and	r0, r0
  b4:	10 08       	sbc	r1, r0
  b6:	04 02       	muls	r16, r20
  b8:	3e 51       	subi	r19, 0x1E	; 30
  ba:	49 45       	sbci	r20, 0x59	; 89
  bc:	3e 00       	.word	0x003e	; ????
  be:	42 7f       	andi	r20, 0xF2	; 242
  c0:	40 00       	.word	0x0040	; ????
  c2:	42 61       	ori	r20, 0x12	; 18
  c4:	51 49       	sbci	r21, 0x91	; 145
  c6:	46 21       	and	r20, r6
  c8:	41 45       	sbci	r20, 0x51	; 81
  ca:	4b 31       	cpi	r20, 0x1B	; 27
  cc:	18 14       	cp	r1, r8
  ce:	12 7f       	andi	r17, 0xF2	; 242
  d0:	10 27       	eor	r17, r16
  d2:	45 45       	sbci	r20, 0x55	; 85
  d4:	45 39       	cpi	r20, 0x95	; 149
  d6:	3c 4a       	sbci	r19, 0xAC	; 172
  d8:	49 49       	sbci	r20, 0x99	; 153
  da:	30 01       	movw	r6, r0
  dc:	71 09       	sbc	r23, r1
  de:	05 03       	mulsu	r16, r21
  e0:	36 49       	sbci	r19, 0x96	; 150
  e2:	49 49       	sbci	r20, 0x99	; 153
  e4:	36 06       	cpc	r3, r22
  e6:	49 49       	sbci	r20, 0x99	; 153
  e8:	29 1e       	adc	r2, r25
  ea:	00 36       	cpi	r16, 0x60	; 96
  ec:	36 00       	.word	0x0036	; ????
  ee:	00 00       	nop
  f0:	56 36       	cpi	r21, 0x66	; 102
  f2:	00 00       	nop
  f4:	08 14       	cp	r0, r8
  f6:	22 41       	sbci	r18, 0x12	; 18
  f8:	00 14       	cp	r0, r0
  fa:	14 14       	cp	r1, r4
  fc:	14 14       	cp	r1, r4
  fe:	00 41       	sbci	r16, 0x10	; 16
 100:	22 14       	cp	r2, r2
 102:	08 02       	muls	r16, r24
 104:	01 51       	subi	r16, 0x11	; 17
 106:	09 06       	cpc	r0, r25
 108:	32 49       	sbci	r19, 0x92	; 146
 10a:	79 41       	sbci	r23, 0x19	; 25
 10c:	3e 7e       	andi	r19, 0xEE	; 238
 10e:	11 11       	cpse	r17, r1
 110:	11 7e       	andi	r17, 0xE1	; 225
 112:	7f 49       	sbci	r23, 0x9F	; 159
 114:	49 49       	sbci	r20, 0x99	; 153
 116:	36 3e       	cpi	r19, 0xE6	; 230
 118:	41 41       	sbci	r20, 0x11	; 17
 11a:	41 22       	and	r4, r17
 11c:	7f 41       	sbci	r23, 0x1F	; 31
 11e:	41 22       	and	r4, r17
 120:	1c 7f       	andi	r17, 0xFC	; 252
 122:	49 49       	sbci	r20, 0x99	; 153
 124:	49 41       	sbci	r20, 0x19	; 25
 126:	7f 09       	sbc	r23, r15
 128:	09 09       	sbc	r16, r9
 12a:	01 3e       	cpi	r16, 0xE1	; 225
 12c:	41 49       	sbci	r20, 0x91	; 145
 12e:	49 7a       	andi	r20, 0xA9	; 169
 130:	7f 08       	sbc	r7, r15
 132:	08 08       	sbc	r0, r8
 134:	7f 00       	.word	0x007f	; ????
 136:	41 7f       	andi	r20, 0xF1	; 241
 138:	41 00       	.word	0x0041	; ????
 13a:	20 40       	sbci	r18, 0x00	; 0
 13c:	41 3f       	cpi	r20, 0xF1	; 241
 13e:	01 7f       	andi	r16, 0xF1	; 241
 140:	08 14       	cp	r0, r8
 142:	22 41       	sbci	r18, 0x12	; 18
 144:	7f 40       	sbci	r23, 0x0F	; 15
 146:	40 40       	sbci	r20, 0x00	; 0
 148:	40 7f       	andi	r20, 0xF0	; 240
 14a:	02 0c       	add	r0, r2
 14c:	02 7f       	andi	r16, 0xF2	; 242
 14e:	7f 04       	cpc	r7, r15
 150:	08 10       	cpse	r0, r8
 152:	7f 3e       	cpi	r23, 0xEF	; 239
 154:	41 41       	sbci	r20, 0x11	; 17
 156:	41 3e       	cpi	r20, 0xE1	; 225
 158:	7f 09       	sbc	r23, r15
 15a:	09 09       	sbc	r16, r9
 15c:	06 3e       	cpi	r16, 0xE6	; 230
 15e:	41 51       	subi	r20, 0x11	; 17
 160:	21 5e       	subi	r18, 0xE1	; 225
 162:	7f 09       	sbc	r23, r15
 164:	19 29       	or	r17, r9
 166:	46 46       	sbci	r20, 0x66	; 102
 168:	49 49       	sbci	r20, 0x99	; 153
 16a:	49 31       	cpi	r20, 0x19	; 25
 16c:	01 01       	movw	r0, r2
 16e:	7f 01       	movw	r14, r30
 170:	01 3f       	cpi	r16, 0xF1	; 241
 172:	40 40       	sbci	r20, 0x00	; 0
 174:	40 3f       	cpi	r20, 0xF0	; 240
 176:	1f 20       	and	r1, r15
 178:	40 20       	and	r4, r0
 17a:	1f 3f       	cpi	r17, 0xFF	; 255
 17c:	40 38       	cpi	r20, 0x80	; 128
 17e:	40 3f       	cpi	r20, 0xF0	; 240
 180:	63 14       	cp	r6, r3
 182:	08 14       	cp	r0, r8
 184:	63 07       	cpc	r22, r19
 186:	08 70       	andi	r16, 0x08	; 8
 188:	08 07       	cpc	r16, r24
 18a:	61 51       	subi	r22, 0x11	; 17
 18c:	49 45       	sbci	r20, 0x59	; 89
 18e:	43 00       	.word	0x0043	; ????
 190:	7f 41       	sbci	r23, 0x1F	; 31
 192:	41 00       	.word	0x0041	; ????
 194:	02 04       	cpc	r0, r2
 196:	08 10       	cpse	r0, r8
 198:	20 00       	.word	0x0020	; ????
 19a:	41 41       	sbci	r20, 0x11	; 17
 19c:	7f 00       	.word	0x007f	; ????
 19e:	04 02       	muls	r16, r20
 1a0:	01 02       	muls	r16, r17
 1a2:	04 40       	sbci	r16, 0x04	; 4
 1a4:	40 40       	sbci	r20, 0x00	; 0
 1a6:	40 40       	sbci	r20, 0x00	; 0
 1a8:	00 01       	movw	r0, r0
 1aa:	02 04       	cpc	r0, r2
 1ac:	00 20       	and	r0, r0
 1ae:	54 54       	subi	r21, 0x44	; 68
 1b0:	54 78       	andi	r21, 0x84	; 132
 1b2:	7f 48       	sbci	r23, 0x8F	; 143
 1b4:	44 44       	sbci	r20, 0x44	; 68
 1b6:	38 38       	cpi	r19, 0x88	; 136
 1b8:	44 44       	sbci	r20, 0x44	; 68
 1ba:	44 20       	and	r4, r4
 1bc:	38 44       	sbci	r19, 0x48	; 72
 1be:	44 48       	sbci	r20, 0x84	; 132
 1c0:	7f 38       	cpi	r23, 0x8F	; 143
 1c2:	54 54       	subi	r21, 0x44	; 68
 1c4:	54 18       	sub	r5, r4
 1c6:	08 7e       	andi	r16, 0xE8	; 232
 1c8:	09 01       	movw	r0, r18
 1ca:	02 0c       	add	r0, r2
 1cc:	52 52       	subi	r21, 0x22	; 34
 1ce:	52 3e       	cpi	r21, 0xE2	; 226
 1d0:	7f 08       	sbc	r7, r15
 1d2:	04 04       	cpc	r0, r4
 1d4:	78 00       	.word	0x0078	; ????
 1d6:	44 7d       	andi	r20, 0xD4	; 212
 1d8:	40 00       	.word	0x0040	; ????
 1da:	20 40       	sbci	r18, 0x00	; 0
 1dc:	44 3d       	cpi	r20, 0xD4	; 212
 1de:	00 7f       	andi	r16, 0xF0	; 240
 1e0:	10 28       	or	r1, r0
 1e2:	44 00       	.word	0x0044	; ????
 1e4:	00 41       	sbci	r16, 0x10	; 16
 1e6:	7f 40       	sbci	r23, 0x0F	; 15
 1e8:	00 7c       	andi	r16, 0xC0	; 192
 1ea:	04 18       	sub	r0, r4
 1ec:	04 78       	andi	r16, 0x84	; 132
 1ee:	7c 08       	sbc	r7, r12
 1f0:	04 04       	cpc	r0, r4
 1f2:	78 38       	cpi	r23, 0x88	; 136
 1f4:	44 44       	sbci	r20, 0x44	; 68
 1f6:	44 38       	cpi	r20, 0x84	; 132
 1f8:	7c 14       	cp	r7, r12
 1fa:	14 14       	cp	r1, r4
 1fc:	08 08       	sbc	r0, r8
 1fe:	14 14       	cp	r1, r4
 200:	18 7c       	andi	r17, 0xC8	; 200
 202:	7c 08       	sbc	r7, r12
 204:	04 04       	cpc	r0, r4
 206:	08 48       	sbci	r16, 0x88	; 136
 208:	54 54       	subi	r21, 0x44	; 68
 20a:	54 20       	and	r5, r4
 20c:	04 3f       	cpi	r16, 0xF4	; 244
 20e:	44 40       	sbci	r20, 0x04	; 4
 210:	20 3c       	cpi	r18, 0xC0	; 192
 212:	40 40       	sbci	r20, 0x00	; 0
 214:	20 7c       	andi	r18, 0xC0	; 192
 216:	1c 20       	and	r1, r12
 218:	40 20       	and	r4, r0
 21a:	1c 3c       	cpi	r17, 0xCC	; 204
 21c:	40 30       	cpi	r20, 0x00	; 0
 21e:	40 3c       	cpi	r20, 0xC0	; 192
 220:	44 28       	or	r4, r4
 222:	10 28       	or	r1, r0
 224:	44 0c       	add	r4, r4
 226:	50 50       	subi	r21, 0x00	; 0
 228:	50 3c       	cpi	r21, 0xC0	; 192
 22a:	44 64       	ori	r20, 0x44	; 68
 22c:	54 4c       	sbci	r21, 0xC4	; 196
 22e:	44 00       	.word	0x0044	; ????
 230:	08 36       	cpi	r16, 0x68	; 104
 232:	41 00       	.word	0x0041	; ????
 234:	00 00       	nop
 236:	7f 00       	.word	0x007f	; ????
 238:	00 00       	nop
 23a:	41 36       	cpi	r20, 0x61	; 97
 23c:	08 00       	.word	0x0008	; ????
 23e:	10 08       	sbc	r1, r0
 240:	08 10       	cpse	r0, r8
 242:	08 78       	andi	r16, 0x88	; 136
 244:	46 41       	sbci	r20, 0x16	; 22
 246:	46 78       	andi	r20, 0x86	; 134

00000248 <__ctors_end>:
 248:	11 24       	eor	r1, r1
 24a:	1f be       	out	0x3f, r1	; 63
 24c:	cf ef       	ldi	r28, 0xFF	; 255
 24e:	d8 e0       	ldi	r29, 0x08	; 8
 250:	de bf       	out	0x3e, r29	; 62
 252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
 254:	13 e0       	ldi	r17, 0x03	; 3
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	ee e9       	ldi	r30, 0x9E	; 158
 25c:	f7 e0       	ldi	r31, 0x07	; 7
 25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
 260:	05 90       	lpm	r0, Z+
 262:	0d 92       	st	X+, r0
 264:	ae 33       	cpi	r26, 0x3E	; 62
 266:	b1 07       	cpc	r27, r17
 268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>
 26a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
 26e:	0c 94 cd 03 	jmp	0x79a	; 0x79a <_exit>

00000272 <__bad_interrupt>:
 272:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000276 <buttons__poll>:
﻿#include "buttons.h"


void buttons__poll() {
	uint16_t timer = 0;
	while (!(PINC & (1<<BUT1))) {
 276:	30 99       	sbic	0x06, 0	; 6
 278:	0f c0       	rjmp	.+30     	; 0x298 <buttons__poll+0x22>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 27e:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	ef e9       	ldi	r30, 0x9F	; 159
 282:	ff e0       	ldi	r31, 0x0F	; 15
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <buttons__poll+0xe>
 288:	00 c0       	rjmp	.+0      	; 0x28a <buttons__poll+0x14>
 28a:	00 00       	nop
﻿#include "buttons.h"


void buttons__poll() {
	uint16_t timer = 0;
	while (!(PINC & (1<<BUT1))) {
 28c:	30 9b       	sbis	0x06, 0	; 6
 28e:	f7 cf       	rjmp	.-18     	; 0x27e <buttons__poll+0x8>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
 290:	0b 97       	sbiw	r24, 0x0b	; 11
 292:	10 f0       	brcs	.+4      	; 0x298 <buttons__poll+0x22>
		nokia__select_state();
 294:	0e 94 20 03 	call	0x640	; 0x640 <nokia__select_state>
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
 298:	31 99       	sbic	0x06, 1	; 6
 29a:	0f c0       	rjmp	.+30     	; 0x2ba <buttons__poll+0x44>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	ef e9       	ldi	r30, 0x9F	; 159
 2a4:	ff e0       	ldi	r31, 0x0F	; 15
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <buttons__poll+0x30>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <buttons__poll+0x36>
 2ac:	00 00       	nop
	if (timer > DEBOUNCE_TIME) {
		nokia__select_state();
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
 2ae:	31 9b       	sbis	0x06, 1	; 6
 2b0:	f7 cf       	rjmp	.-18     	; 0x2a0 <buttons__poll+0x2a>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
 2b2:	0b 97       	sbiw	r24, 0x0b	; 11
 2b4:	10 f0       	brcs	.+4      	; 0x2ba <buttons__poll+0x44>
		nokia__next_state();
 2b6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <nokia__next_state>
 2ba:	08 95       	ret

000002bc <esp__transmit_state>:
#include "esp8266_esp01.h"

void esp__transmit_state() {
	uart__polled_put(state+'60');
 2bc:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <state>
 2c0:	80 5d       	subi	r24, 0xD0	; 208
 2c2:	0e 94 94 03 	call	0x728	; 0x728 <uart__polled_put>
 2c6:	08 95       	ret

000002c8 <main>:


int main(void)
{
	//char test[5][15] = {"Trash: Vincent", "Dishes: Chris", "Vac: Quin", "Cook: Mick", "Idle: Sarah"};
	uart__init(9600);
 2c8:	60 e8       	ldi	r22, 0x80	; 128
 2ca:	75 e2       	ldi	r23, 0x25	; 37
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <uart__init>
	spi__init();	
 2d4:	0e 94 4a 03 	call	0x694	; 0x694 <spi__init>
	nokia__init();
 2d8:	0e 94 ab 01 	call	0x356	; 0x356 <nokia__init>
	//buttons__init();
	nokia__default();
 2dc:	0e 94 b6 02 	call	0x56c	; 0x56c <nokia__default>
		//nokia__fill();
		//nokia__update();
		//uart__polled_put('a');
		//_delay_ms(100);
		//nokia__next_state();
		buttons__poll();
 2e0:	0e 94 3b 01 	call	0x276	; 0x276 <buttons__poll>
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <main+0x18>

000002e6 <nokia__cmd>:
		}
	}
}

void nokia__scale(uint8_t sc) {
	scale = sc;
 2e6:	5d 98       	cbi	0x0b, 5	; 11
 2e8:	2a 98       	cbi	0x05, 2	; 5
 2ea:	0e 94 4f 03 	call	0x69e	; 0x69e <spi__write>
 2ee:	2a 9a       	sbi	0x05, 2	; 5
 2f0:	08 95       	ret

000002f2 <nokia__data>:
 2f2:	5d 9a       	sbi	0x0b, 5	; 11
 2f4:	2a 98       	cbi	0x05, 2	; 5
 2f6:	0e 94 4f 03 	call	0x69e	; 0x69e <spi__write>
 2fa:	2a 9a       	sbi	0x05, 2	; 5
 2fc:	08 95       	ret

000002fe <nokia__cursor>:
 2fe:	cf 93       	push	r28
 300:	c6 2f       	mov	r28, r22
 302:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 306:	8c 2f       	mov	r24, r28
 308:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <nokia__cursor_origin>:
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 7f 01 	call	0x2fe	; 0x2fe <nokia__cursor>
 318:	08 95       	ret

0000031a <nokia__update>:
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	0e 94 88 01 	call	0x310	; 0x310 <nokia__cursor_origin>
 326:	cd e3       	ldi	r28, 0x3D	; 61
 328:	d1 e0       	ldi	r29, 0x01	; 1
 32a:	05 e3       	ldi	r16, 0x35	; 53
 32c:	13 e0       	ldi	r17, 0x03	; 3
 32e:	89 91       	ld	r24, Y+
 330:	0e 94 79 01 	call	0x2f2	; 0x2f2 <nokia__data>
 334:	c0 17       	cp	r28, r16
 336:	d1 07       	cpc	r29, r17
 338:	d1 f7       	brne	.-12     	; 0x32e <nokia__update+0x14>
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	08 95       	ret

00000344 <nokia__wipe>:
 344:	ed e3       	ldi	r30, 0x3D	; 61
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	85 e3       	ldi	r24, 0x35	; 53
 34a:	93 e0       	ldi	r25, 0x03	; 3
 34c:	11 92       	st	Z+, r1
 34e:	e8 17       	cp	r30, r24
 350:	f9 07       	cpc	r31, r25
 352:	e1 f7       	brne	.-8      	; 0x34c <nokia__wipe+0x8>
 354:	08 95       	ret

00000356 <nokia__init>:
 356:	80 e6       	ldi	r24, 0x60	; 96
 358:	8a b9       	out	0x0a, r24	; 10
 35a:	5e 9a       	sbi	0x0b, 6	; 11
 35c:	2a 9a       	sbi	0x05, 2	; 5
 35e:	8f e3       	ldi	r24, 0x3F	; 63
 360:	9c e9       	ldi	r25, 0x9C	; 156
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <nokia__init+0xc>
 366:	00 c0       	rjmp	.+0      	; 0x368 <nokia__init+0x12>
 368:	00 00       	nop
 36a:	5e 98       	cbi	0x0b, 6	; 11
 36c:	9f ef       	ldi	r25, 0xFF	; 255
 36e:	2a e6       	ldi	r18, 0x6A	; 106
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	91 50       	subi	r25, 0x01	; 1
 374:	20 40       	sbci	r18, 0x00	; 0
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <nokia__init+0x1c>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <nokia__init+0x26>
 37c:	00 00       	nop
 37e:	5e 9a       	sbi	0x0b, 6	; 11
 380:	2a 98       	cbi	0x05, 2	; 5
 382:	81 e2       	ldi	r24, 0x21	; 33
 384:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 38e:	83 e1       	ldi	r24, 0x13	; 19
 390:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 394:	82 ec       	ldi	r24, 0xC2	; 194
 396:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 39a:	80 e2       	ldi	r24, 0x20	; 32
 39c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 3a0:	89 e0       	ldi	r24, 0x09	; 9
 3a2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 3a6:	80 e8       	ldi	r24, 0x80	; 128
 3a8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 3ac:	80 e4       	ldi	r24, 0x40	; 64
 3ae:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 3b2:	0e 94 a2 01 	call	0x344	; 0x344 <nokia__wipe>
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 3bc:	8c e0       	ldi	r24, 0x0C	; 12
 3be:	0e 94 73 01 	call	0x2e6	; 0x2e6 <nokia__cmd>
 3c2:	08 95       	ret

000003c4 <nokia__pixel>:
 3c4:	84 35       	cpi	r24, 0x54	; 84
 3c6:	a0 f5       	brcc	.+104    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3c8:	60 33       	cpi	r22, 0x30	; 48
 3ca:	90 f5       	brcc	.+100    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3cc:	26 2f       	mov	r18, r22
 3ce:	27 70       	andi	r18, 0x07	; 7
 3d0:	44 23       	and	r20, r20
 3d2:	b9 f0       	breq	.+46     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3d4:	66 95       	lsr	r22
 3d6:	66 95       	lsr	r22
 3d8:	66 95       	lsr	r22
 3da:	e8 2f       	mov	r30, r24
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	84 e5       	ldi	r24, 0x54	; 84
 3e0:	68 9f       	mul	r22, r24
 3e2:	e0 0d       	add	r30, r0
 3e4:	f1 1d       	adc	r31, r1
 3e6:	11 24       	eor	r1, r1
 3e8:	e3 5c       	subi	r30, 0xC3	; 195
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <nokia__pixel+0x32>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	2a 95       	dec	r18
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <nokia__pixel+0x2e>
 3fa:	90 81       	ld	r25, Z
 3fc:	89 2b       	or	r24, r25
 3fe:	80 83       	st	Z, r24
 400:	08 95       	ret
 402:	66 95       	lsr	r22
 404:	66 95       	lsr	r22
 406:	66 95       	lsr	r22
 408:	e8 2f       	mov	r30, r24
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	84 e5       	ldi	r24, 0x54	; 84
 40e:	68 9f       	mul	r22, r24
 410:	e0 0d       	add	r30, r0
 412:	f1 1d       	adc	r31, r1
 414:	11 24       	eor	r1, r1
 416:	e3 5c       	subi	r30, 0xC3	; 195
 418:	fe 4f       	sbci	r31, 0xFE	; 254
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	2a 95       	dec	r18
 426:	e2 f7       	brpl	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	80 95       	com	r24
 42a:	90 81       	ld	r25, Z
 42c:	89 23       	and	r24, r25
 42e:	80 83       	st	Z, r24
 430:	08 95       	ret

00000432 <nokia__char>:
}


void nokia__char(char c, uint8_t x, uint8_t y) {
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
	//char col;
	for (uint8_t i = 0; i < 5*scale; ++i) {
 440:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <scale>
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	f9 01       	movw	r30, r18
 448:	ee 0f       	add	r30, r30
 44a:	ff 1f       	adc	r31, r31
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	2e 0f       	add	r18, r30
 452:	3f 1f       	adc	r19, r31
 454:	12 16       	cp	r1, r18
 456:	13 06       	cpc	r1, r19
 458:	0c f4       	brge	.+2      	; 0x45c <nokia__char+0x2a>
 45a:	46 c0       	rjmp	.+140    	; 0x4e8 <nokia__char+0xb6>
 45c:	58 c0       	rjmp	.+176    	; 0x50e <nokia__char+0xdc>
		//col = ASCII[c - 0x20][i];
		for (uint8_t j = 0; j < 8*scale; ++j) {
 45e:	0d 2d       	mov	r16, r13
 460:	10 e0       	ldi	r17, 0x00	; 0
			if (pgm_read_byte(&ASCII[c - 0x20][i/scale]) & (0x01 << j/scale)) {
 462:	8f 2d       	mov	r24, r15
 464:	62 2f       	mov	r22, r18
 466:	0e 94 9f 03 	call	0x73e	; 0x73e <__udivmodqi4>
 46a:	fe 01       	movw	r30, r28
 46c:	e8 0f       	add	r30, r24
 46e:	f1 1d       	adc	r31, r1
 470:	e8 59       	subi	r30, 0x98	; 152
 472:	ff 4f       	sbci	r31, 0xFF	; 255
 474:	e4 91       	lpm	r30, Z
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	81 2f       	mov	r24, r17
 47a:	0e 94 9f 03 	call	0x73e	; 0x73e <__udivmodqi4>
 47e:	02 c0       	rjmp	.+4      	; 0x484 <nokia__char+0x52>
 480:	f5 95       	asr	r31
 482:	e7 95       	ror	r30
 484:	8a 95       	dec	r24
 486:	e2 f7       	brpl	.-8      	; 0x480 <nokia__char+0x4e>
 488:	e0 ff       	sbrs	r30, 0
 48a:	06 c0       	rjmp	.+12     	; 0x498 <nokia__char+0x66>
				nokia__pixel(x + i, y + j, BLACK);
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	60 2f       	mov	r22, r16
 490:	8e 2d       	mov	r24, r14
 492:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <nokia__pixel>
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <nokia__char+0x70>
			}
			else {
				nokia__pixel(x + i, y + j, WHITE);
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	60 2f       	mov	r22, r16
 49c:	8e 2d       	mov	r24, r14
 49e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <nokia__pixel>

void nokia__char(char c, uint8_t x, uint8_t y) {
	//char col;
	for (uint8_t i = 0; i < 5*scale; ++i) {
		//col = ASCII[c - 0x20][i];
		for (uint8_t j = 0; j < 8*scale; ++j) {
 4a2:	1f 5f       	subi	r17, 0xFF	; 255
 4a4:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <scale>
 4a8:	0f 5f       	subi	r16, 0xFF	; 255
 4aa:	41 2f       	mov	r20, r17
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	82 2f       	mov	r24, r18
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	48 17       	cp	r20, r24
 4c0:	59 07       	cpc	r21, r25
 4c2:	7c f2       	brlt	.-98     	; 0x462 <nokia__char+0x30>
}


void nokia__char(char c, uint8_t x, uint8_t y) {
	//char col;
	for (uint8_t i = 0; i < 5*scale; ++i) {
 4c4:	f3 94       	inc	r15
 4c6:	e3 94       	inc	r14
 4c8:	2f 2d       	mov	r18, r15
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <scale>
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	ac 01       	movw	r20, r24
 4d4:	44 0f       	add	r20, r20
 4d6:	55 1f       	adc	r21, r21
 4d8:	44 0f       	add	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	84 0f       	add	r24, r20
 4de:	95 1f       	adc	r25, r21
 4e0:	28 17       	cp	r18, r24
 4e2:	39 07       	cpc	r19, r25
 4e4:	7c f0       	brlt	.+30     	; 0x504 <nokia__char+0xd2>
 4e6:	13 c0       	rjmp	.+38     	; 0x50e <nokia__char+0xdc>
 4e8:	d4 2e       	mov	r13, r20
 4ea:	e6 2e       	mov	r14, r22
 4ec:	f1 2c       	mov	r15, r1
		//col = ASCII[c - 0x20][i];
		for (uint8_t j = 0; j < 8*scale; ++j) {
			if (pgm_read_byte(&ASCII[c - 0x20][i/scale]) & (0x01 << j/scale)) {
 4ee:	c8 2f       	mov	r28, r24
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
 4f2:	ce 01       	movw	r24, r28
 4f4:	80 97       	sbiw	r24, 0x20	; 32
 4f6:	ec 01       	movw	r28, r24
 4f8:	cc 0f       	add	r28, r28
 4fa:	dd 1f       	adc	r29, r29
 4fc:	cc 0f       	add	r28, r28
 4fe:	dd 1f       	adc	r29, r29
 500:	c8 0f       	add	r28, r24
 502:	d9 1f       	adc	r29, r25

void nokia__char(char c, uint8_t x, uint8_t y) {
	//char col;
	for (uint8_t i = 0; i < 5*scale; ++i) {
		//col = ASCII[c - 0x20][i];
		for (uint8_t j = 0; j < 8*scale; ++j) {
 504:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <scale>
 508:	21 11       	cpse	r18, r1
 50a:	a9 cf       	rjmp	.-174    	; 0x45e <nokia__char+0x2c>
 50c:	db cf       	rjmp	.-74     	; 0x4c4 <nokia__char+0x92>
			else {
				nokia__pixel(x + i, y + j, WHITE);
			}
		}
	}
}
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	ff 90       	pop	r15
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	08 95       	ret

0000051e <nokia__str>:

void nokia__str(char str[], uint8_t str_size, uint8_t x, uint8_t y) {
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	c4 2f       	mov	r28, r20
 52c:	d2 2f       	mov	r29, r18
	for (int i = 0; i < str_size; ++i) {
 52e:	66 23       	and	r22, r22
 530:	b1 f0       	breq	.+44     	; 0x55e <nokia__str+0x40>
 532:	8c 01       	movw	r16, r24
 534:	7c 01       	movw	r14, r24
 536:	e6 0e       	add	r14, r22
 538:	f1 1c       	adc	r15, r1
		nokia__char(str[i], x, y);
 53a:	4d 2f       	mov	r20, r29
 53c:	6c 2f       	mov	r22, r28
 53e:	f8 01       	movw	r30, r16
 540:	81 91       	ld	r24, Z+
 542:	8f 01       	movw	r16, r30
 544:	0e 94 19 02 	call	0x432	; 0x432 <nokia__char>
		x += 5*scale + 1;
 548:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <scale>
 54c:	29 2f       	mov	r18, r25
 54e:	22 0f       	add	r18, r18
 550:	22 0f       	add	r18, r18
 552:	92 0f       	add	r25, r18
 554:	9f 5f       	subi	r25, 0xFF	; 255
 556:	c9 0f       	add	r28, r25
		}
	}
}

void nokia__str(char str[], uint8_t str_size, uint8_t x, uint8_t y) {
	for (int i = 0; i < str_size; ++i) {
 558:	0e 15       	cp	r16, r14
 55a:	1f 05       	cpc	r17, r15
 55c:	71 f7       	brne	.-36     	; 0x53a <nokia__str+0x1c>
		nokia__char(str[i], x, y);
		x += 5*scale + 1;
	}
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	08 95       	ret

0000056c <nokia__default>:

char entries[4][15] = {"SELECT TO PING", "DISHES", "TRASH", "VACUUM"};

void nokia__default() {
	state = 1;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <state>
	nokia__cursor_origin();
 572:	0e 94 88 01 	call	0x310	; 0x310 <nokia__cursor_origin>
	nokia__char('>', 16, 12);
 576:	4c e0       	ldi	r20, 0x0C	; 12
 578:	60 e1       	ldi	r22, 0x10	; 16
 57a:	8e e3       	ldi	r24, 0x3E	; 62
 57c:	0e 94 19 02 	call	0x432	; 0x432 <nokia__char>
	nokia__str(entries[0], strlen(entries[0]), 0, 0);
 580:	e0 e0       	ldi	r30, 0x00	; 0
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	01 90       	ld	r0, Z+
 586:	00 20       	and	r0, r0
 588:	e9 f7       	brne	.-6      	; 0x584 <nokia__default+0x18>
 58a:	31 97       	sbiw	r30, 0x01	; 1
 58c:	bf 01       	movw	r22, r30
 58e:	60 50       	subi	r22, 0x00	; 0
 590:	71 40       	sbci	r23, 0x01	; 1
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 8f 02 	call	0x51e	; 0x51e <nokia__str>
	nokia__str(entries[1], strlen(entries[1]), 24, 12);
 59e:	ef e0       	ldi	r30, 0x0F	; 15
 5a0:	f1 e0       	ldi	r31, 0x01	; 1
 5a2:	01 90       	ld	r0, Z+
 5a4:	00 20       	and	r0, r0
 5a6:	e9 f7       	brne	.-6      	; 0x5a2 <nokia__default+0x36>
 5a8:	bf 01       	movw	r22, r30
 5aa:	60 51       	subi	r22, 0x10	; 16
 5ac:	71 40       	sbci	r23, 0x01	; 1
 5ae:	2c e0       	ldi	r18, 0x0C	; 12
 5b0:	48 e1       	ldi	r20, 0x18	; 24
 5b2:	8f e0       	ldi	r24, 0x0F	; 15
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	0e 94 8f 02 	call	0x51e	; 0x51e <nokia__str>
	nokia__str(entries[2], strlen(entries[2]), 24, 24);
 5ba:	ee e1       	ldi	r30, 0x1E	; 30
 5bc:	f1 e0       	ldi	r31, 0x01	; 1
 5be:	01 90       	ld	r0, Z+
 5c0:	00 20       	and	r0, r0
 5c2:	e9 f7       	brne	.-6      	; 0x5be <nokia__default+0x52>
 5c4:	bf 01       	movw	r22, r30
 5c6:	6f 51       	subi	r22, 0x1F	; 31
 5c8:	71 40       	sbci	r23, 0x01	; 1
 5ca:	28 e1       	ldi	r18, 0x18	; 24
 5cc:	48 e1       	ldi	r20, 0x18	; 24
 5ce:	8e e1       	ldi	r24, 0x1E	; 30
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 8f 02 	call	0x51e	; 0x51e <nokia__str>
	nokia__str(entries[3], strlen(entries[3]), 24, 36);
 5d6:	ed e2       	ldi	r30, 0x2D	; 45
 5d8:	f1 e0       	ldi	r31, 0x01	; 1
 5da:	01 90       	ld	r0, Z+
 5dc:	00 20       	and	r0, r0
 5de:	e9 f7       	brne	.-6      	; 0x5da <nokia__default+0x6e>
 5e0:	bf 01       	movw	r22, r30
 5e2:	6e 52       	subi	r22, 0x2E	; 46
 5e4:	71 40       	sbci	r23, 0x01	; 1
 5e6:	24 e2       	ldi	r18, 0x24	; 36
 5e8:	48 e1       	ldi	r20, 0x18	; 24
 5ea:	8d e2       	ldi	r24, 0x2D	; 45
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 8f 02 	call	0x51e	; 0x51e <nokia__str>
	nokia__update();
 5f2:	0e 94 8d 01 	call	0x31a	; 0x31a <nokia__update>
 5f6:	08 95       	ret

000005f8 <nokia__next_state>:
}

void nokia__next_state() {
	
	
	nokia__char(' ', 16, 12*state);
 5f8:	40 91 35 03 	lds	r20, 0x0335	; 0x800335 <state>
 5fc:	84 2f       	mov	r24, r20
 5fe:	88 0f       	add	r24, r24
 600:	48 0f       	add	r20, r24
 602:	44 0f       	add	r20, r20
 604:	44 0f       	add	r20, r20
 606:	60 e1       	ldi	r22, 0x10	; 16
 608:	80 e2       	ldi	r24, 0x20	; 32
 60a:	0e 94 19 02 	call	0x432	; 0x432 <nokia__char>
	state++;
 60e:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <state>
 612:	8f 5f       	subi	r24, 0xFF	; 255
	if (state == 4)
 614:	84 30       	cpi	r24, 0x04	; 4
 616:	19 f0       	breq	.+6      	; 0x61e <nokia__next_state+0x26>

void nokia__next_state() {
	
	
	nokia__char(' ', 16, 12*state);
	state++;
 618:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <state>
 61c:	03 c0       	rjmp	.+6      	; 0x624 <nokia__next_state+0x2c>
	if (state == 4)
		state = 1;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <state>
	nokia__char('>', 16, 12*state);
 624:	40 91 35 03 	lds	r20, 0x0335	; 0x800335 <state>
 628:	84 2f       	mov	r24, r20
 62a:	88 0f       	add	r24, r24
 62c:	48 0f       	add	r20, r24
 62e:	44 0f       	add	r20, r20
 630:	44 0f       	add	r20, r20
 632:	60 e1       	ldi	r22, 0x10	; 16
 634:	8e e3       	ldi	r24, 0x3E	; 62
 636:	0e 94 19 02 	call	0x432	; 0x432 <nokia__char>
	nokia__update();
 63a:	0e 94 8d 01 	call	0x31a	; 0x31a <nokia__update>
 63e:	08 95       	ret

00000640 <nokia__select_state>:
}

void nokia__select_state() {
	nokia__str("---", 3, 0, 12*state);
 640:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <state>
 644:	82 2f       	mov	r24, r18
 646:	88 0f       	add	r24, r24
 648:	28 0f       	add	r18, r24
 64a:	22 0f       	add	r18, r18
 64c:	22 0f       	add	r18, r18
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	63 e0       	ldi	r22, 0x03	; 3
 652:	86 e3       	ldi	r24, 0x36	; 54
 654:	93 e0       	ldi	r25, 0x03	; 3
 656:	0e 94 8f 02 	call	0x51e	; 0x51e <nokia__str>
	nokia__update();
 65a:	0e 94 8d 01 	call	0x31a	; 0x31a <nokia__update>
	esp__transmit_state();
 65e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <esp__transmit_state>
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	8e e9       	ldi	r24, 0x9E	; 158
 666:	94 e2       	ldi	r25, 0x24	; 36
 668:	21 50       	subi	r18, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <nokia__select_state+0x28>
 670:	00 c0       	rjmp	.+0      	; 0x672 <nokia__select_state+0x32>
 672:	00 00       	nop
	_delay_ms(750);
	nokia__str("   ", 3, 0, 12*state);
 674:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <state>
 678:	82 2f       	mov	r24, r18
 67a:	88 0f       	add	r24, r24
 67c:	28 0f       	add	r18, r24
 67e:	22 0f       	add	r18, r18
 680:	22 0f       	add	r18, r18
 682:	40 e0       	ldi	r20, 0x00	; 0
 684:	63 e0       	ldi	r22, 0x03	; 3
 686:	8a e3       	ldi	r24, 0x3A	; 58
 688:	93 e0       	ldi	r25, 0x03	; 3
 68a:	0e 94 8f 02 	call	0x51e	; 0x51e <nokia__str>
	nokia__update();
 68e:	0e 94 8d 01 	call	0x31a	; 0x31a <nokia__update>
 692:	08 95       	ret

00000694 <spi__init>:
	SPCR |= (1<<SPE);
}

void spi__stop(void) {
	//Disable SPI, Set SPI Enable bit to 0;
	SPCR &= ~(1<<SPE);
 694:	8c e2       	ldi	r24, 0x2C	; 44
 696:	84 b9       	out	0x04, r24	; 4
 698:	81 e5       	ldi	r24, 0x51	; 81
 69a:	8c bd       	out	0x2c, r24	; 44
 69c:	08 95       	ret

0000069e <spi__write>:
}

void spi__write(uint8_t data) {
	//Load SPI data register with data
	SPDR = data;
 69e:	8e bd       	out	0x2e, r24	; 46
	
	//PORTD &= ~(1<<CE);
	//PORTB &= ~(1<<CE);
	
	//Wait for data transmission to finish
	while (!(SPSR & (1<<SPIF)));
 6a0:	0d b4       	in	r0, 0x2d	; 45
 6a2:	07 fe       	sbrs	r0, 7
 6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <spi__write+0x2>
	
	//PORTD |= (1<<CE);
	//PORTB |= (1<<CE);
}
 6a6:	08 95       	ret

000006a8 <uart__init>:
#include "uart.h"

void uart__init(uint32_t baud_rate) {
	// UBRn f_osc/(16 Baud) - 1
	uint32_t uart_baud_rate; 
	if(baud_rate != 9600) {
 6a8:	60 38       	cpi	r22, 0x80	; 128
 6aa:	25 e2       	ldi	r18, 0x25	; 37
 6ac:	72 07       	cpc	r23, r18
 6ae:	81 05       	cpc	r24, r1
 6b0:	91 05       	cpc	r25, r1
 6b2:	09 f1       	breq	.+66     	; 0x6f6 <uart__init+0x4e>
		uart_baud_rate = F_CPU / (16 * baud_rate) - 1;
 6b4:	dc 01       	movw	r26, r24
 6b6:	cb 01       	movw	r24, r22
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	aa 1f       	adc	r26, r26
 6be:	bb 1f       	adc	r27, r27
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	aa 1f       	adc	r26, r26
 6c6:	bb 1f       	adc	r27, r27
 6c8:	9c 01       	movw	r18, r24
 6ca:	ad 01       	movw	r20, r26
 6cc:	22 0f       	add	r18, r18
 6ce:	33 1f       	adc	r19, r19
 6d0:	44 1f       	adc	r20, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	22 0f       	add	r18, r18
 6d6:	33 1f       	adc	r19, r19
 6d8:	44 1f       	adc	r20, r20
 6da:	55 1f       	adc	r21, r21
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	74 e2       	ldi	r23, 0x24	; 36
 6e0:	84 ef       	ldi	r24, 0xF4	; 244
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 ab 03 	call	0x756	; 0x756 <__udivmodsi4>
 6e8:	ba 01       	movw	r22, r20
 6ea:	a9 01       	movw	r20, r18
 6ec:	41 50       	subi	r20, 0x01	; 1
 6ee:	51 09       	sbc	r21, r1
 6f0:	61 09       	sbc	r22, r1
 6f2:	71 09       	sbc	r23, r1
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <uart__init+0x56>
	}
	else {
		uart_baud_rate = (F_CPU / 8 / baud_rate - 1) / 2;
 6f6:	47 e6       	ldi	r20, 0x67	; 103
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	70 e0       	ldi	r23, 0x00	; 0
	}
	UBRR0H = (uint8_t)(uart_baud_rate >> 8);
 6fe:	bb 27       	eor	r27, r27
 700:	a7 2f       	mov	r26, r23
 702:	96 2f       	mov	r25, r22
 704:	85 2f       	mov	r24, r21
 706:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)uart_baud_rate;
 70a:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	// Enable receiver and transmitter
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 70e:	88 e1       	ldi	r24, 0x18	; 24
 710:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	// Set Frame: 8 data bit, 1 stop bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 714:	8e e0       	ldi	r24, 0x0E	; 14
 716:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 71a:	08 95       	ret

0000071c <uart__is_ready>:
}

bool uart__is_ready(void) {
	// The transmit buffer is empty and is ready to transmit
	return UCSR0A & (1 << UDRE0); 
 71c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
}
 720:	85 fb       	bst	r24, 5
 722:	88 27       	eor	r24, r24
 724:	80 f9       	bld	r24, 0
 726:	08 95       	ret

00000728 <uart__polled_put>:


bool uart__polled_put(uint8_t data) {
 728:	cf 93       	push	r28
 72a:	c8 2f       	mov	r28, r24
	// Interrupt is disabled, need to poll data 
	bool status = false;
	while(!uart__is_ready());
 72c:	0e 94 8e 03 	call	0x71c	; 0x71c <uart__is_ready>
 730:	88 23       	and	r24, r24
 732:	e1 f3       	breq	.-8      	; 0x72c <uart__polled_put+0x4>
	UDR0 = data;
 734:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return status; 
}
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	cf 91       	pop	r28
 73c:	08 95       	ret

0000073e <__udivmodqi4>:
 73e:	99 1b       	sub	r25, r25
 740:	79 e0       	ldi	r23, 0x09	; 9
 742:	04 c0       	rjmp	.+8      	; 0x74c <__udivmodqi4_ep>

00000744 <__udivmodqi4_loop>:
 744:	99 1f       	adc	r25, r25
 746:	96 17       	cp	r25, r22
 748:	08 f0       	brcs	.+2      	; 0x74c <__udivmodqi4_ep>
 74a:	96 1b       	sub	r25, r22

0000074c <__udivmodqi4_ep>:
 74c:	88 1f       	adc	r24, r24
 74e:	7a 95       	dec	r23
 750:	c9 f7       	brne	.-14     	; 0x744 <__udivmodqi4_loop>
 752:	80 95       	com	r24
 754:	08 95       	ret

00000756 <__udivmodsi4>:
 756:	a1 e2       	ldi	r26, 0x21	; 33
 758:	1a 2e       	mov	r1, r26
 75a:	aa 1b       	sub	r26, r26
 75c:	bb 1b       	sub	r27, r27
 75e:	fd 01       	movw	r30, r26
 760:	0d c0       	rjmp	.+26     	; 0x77c <__udivmodsi4_ep>

00000762 <__udivmodsi4_loop>:
 762:	aa 1f       	adc	r26, r26
 764:	bb 1f       	adc	r27, r27
 766:	ee 1f       	adc	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	a2 17       	cp	r26, r18
 76c:	b3 07       	cpc	r27, r19
 76e:	e4 07       	cpc	r30, r20
 770:	f5 07       	cpc	r31, r21
 772:	20 f0       	brcs	.+8      	; 0x77c <__udivmodsi4_ep>
 774:	a2 1b       	sub	r26, r18
 776:	b3 0b       	sbc	r27, r19
 778:	e4 0b       	sbc	r30, r20
 77a:	f5 0b       	sbc	r31, r21

0000077c <__udivmodsi4_ep>:
 77c:	66 1f       	adc	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	1a 94       	dec	r1
 786:	69 f7       	brne	.-38     	; 0x762 <__udivmodsi4_loop>
 788:	60 95       	com	r22
 78a:	70 95       	com	r23
 78c:	80 95       	com	r24
 78e:	90 95       	com	r25
 790:	9b 01       	movw	r18, r22
 792:	ac 01       	movw	r20, r24
 794:	bd 01       	movw	r22, r26
 796:	cf 01       	movw	r24, r30
 798:	08 95       	ret

0000079a <_exit>:
 79a:	f8 94       	cli

0000079c <__stop_program>:
 79c:	ff cf       	rjmp	.-2      	; 0x79c <__stop_program>
